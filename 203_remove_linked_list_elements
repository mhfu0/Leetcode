# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

# Iterative solution
class Solution:
    def removeElements(self, head, val):
        """
        :type head: ListNode
        :type val: int
        :rtype: ListNode
        """
        dummy = ListNode(0)
        dummy.next = head
        prev, curr = dummy, head
        
        while prev and curr:
            if curr.val == val:
                prev.next = curr.next
            else:
                # The key is to add this condition control so that prev.next
                # is keep checked until no prev.next.val==val
                prev = curr
            curr = curr.next
        return dummy.next 

# Recursive solution from here:
# https://leetcode.com/problems/remove-linked-list-elements/discuss/57306/3-line-recursive-solution
class Solution:
    def helper(self, head, val):
        if not head: return head
        head.next = self.helper(head.next, val)
        return head.next if head.val == val else head
    def removeElements(self, head, val):
        """
        :type head: ListNode
        :type val: int
        :rtype: ListNode
        """
        return self.helper(head, val)

## Failed on the case [1, 1, 1], 1
class Solution:
    def helper(self, head, val):
        if not head: return
        if not head.next:
            if head.val != val:
                head = None
        
        if head.next.val == val:
            head.next = head.next.next
        self.helper(head.next, val)
    def removeElements(self, head, val):
        """
        :type head: ListNode
        :type val: int
        :rtype: ListNode
        """
        if not head: return head
        if not head.next:
            return head if head.val != val else None
            
        self.helper(head, val)
        return head

## Failed on the case [1, 1], 1
class Solution:
    def helper(self, head, val):
        if not head: return
        if not head.next: return
        
        if head.next.val == val:
            head.next = head.next.next
        self.helper(head.next, val)
    def removeElements(self, head, val):
        """
        :type head: ListNode
        :type val: int
        :rtype: ListNode
        """
        if not head: return head
        if not head.next:
            return head if head.val != val else None
            
        self.helper(head, val)
        return head
